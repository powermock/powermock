def publishableModules = allprojects - rootProject - project(":powermock-api") - project(":powermock-classloading") - project(":powermock-modules") - project(":tests") - project(":tests").subprojects - project(":powermock-release") - project(":powermock-release").subprojects

configure(publishableModules) { project ->
    apply from: "${gradleScriptDir}/java-module.gradle"
    apply from: "${gradleScriptDir}/publishing/publishable-module.gradle"
    apply from: "${gradleScriptDir}/publishing/publish.gradle"
}

def skippedTasksForUnpublishableModules = [
    'generatePomFileForJavaLibraryPublication',
    'publishJavaLibraryPublicationToMavenLocal',
    'javadoc',
    'javadocJar',
    'sourcesJar',
    'bintrayUpload',
    'install'
]

def unpublishableModules = allprojects - publishableModules - project(":powermock-release").subprojects
configure(unpublishableModules) { project ->
    project.tasks.all {
        if(skippedTasksForUnpublishableModules.contains(it.name)) {
            it.enabled = false
        }
    }
}

def skippedTasksForGenericModules = [
    'generatePomFileForJavaLibraryPublication',
    'publishJavaLibraryPublicationToMavenLocal',
    'jar',
    'javadoc',
    'javadocJar',
    'sourcesJar'
]

def genericModules = project(":powermock-release").subprojects
configure(genericModules) { project ->
    project.tasks.all {
        if (skippedTasksForGenericModules.contains(it.name)) {
            it.enabled = false
        }
    }
}

if (project.hasProperty('checkJava6Compatibility') && !System.getenv("SKIP_RELEASE")) {
    //if we're skipping release, let's also skip checking compatibility (faster builds)
    configure(publishableModules) { project ->
        project.apply plugin: 'ru.vyarus.animalsniffer'
        project.dependencies {
            signature 'org.codehaus.mojo.signature:java16:1.0@signature'
        }
    }
}

project(":powermock-reflect") {
    description = "Various utilities for accessing internals of a class."

    dependencies {
        compile("org.objenesis:objenesis:${objenesisVersion}")
        compile("net.bytebuddy:byte-buddy:${byteBuddy}")
        compile("net.bytebuddy:byte-buddy-agent:${byteBuddy}")
        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
        testCompile("cglib:cglib-nodep:${cglibVersion}")
    }
}

project(":powermock-core") {
    description = "Various utilities for accessing internals of a class."

    dependencies {
        compile(project(":powermock-reflect"))
        compile("org.javassist:javassist:${javassistVersion}")
        compile("net.bytebuddy:byte-buddy:${byteBuddy}")
        compile("net.bytebuddy:byte-buddy-agent:${byteBuddy}")

        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
        testCompile("com.github.stefanbirkner:system-rules:${systemRulesVersion}")
        testCompile(project(":tests:utils"))

        testCompile("org.mockito:mockito-core:${mockitoVersion}"){
            exclude group: 'net.bytebuddy', module: 'byte-buddy'
            exclude group: 'net.bytebuddy', module: 'byte-buddy-agent'
        }
    }
}

project(":powermock-api") {
    jar {
        enabled = false
    }
}

project(":powermock-api:powermock-api-support") {
    description = "PowerMock API Utility classes."

    dependencies {
        compile(project(":powermock-reflect"))
        compile(project(":powermock-core"))
        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }
}

project(":powermock-api:powermock-api-easymock") {
    description = "PowerMock API for EasyMock."

    dependencies {
        compile(project(":powermock-api:powermock-api-support"))
        compile("cglib:cglib-nodep:${cglibVersion}")
        compile("org.easymock:easymock:${easymockVersion}")

        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }
}



project(":powermock-api:powermock-api-mockito2"){
    description = "PowerMock API for Mockito 2.+.."

    dependencies {

        compile(project(":powermock-api:powermock-api-support"))
        compile("org.mockito:mockito-core:${mockitoVersion}"){
            exclude group: 'net.bytebuddy', module: 'byte-buddy'
            exclude group: 'net.bytebuddy', module: 'byte-buddy-agent'
        }

        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")

        testCompile(project(":tests:utils"))
    }
}

project(":powermock-classloading") {
    jar {
        enabled = false
    }
}

project(":powermock-classloading:powermock-classloading-base") {
    description = "Utilities for loading and executing classes."

    dependencies {
        compile(project(":powermock-api:powermock-api-support"))
        compile(project(":powermock-reflect"))
        compile(project(":powermock-core"))
        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }
}

project(":powermock-classloading:powermock-classloading-objenesis") {
    description = "Performs classloader deep-cloning using Objenesis."

    dependencies {
        compile(project(":powermock-classloading:powermock-classloading-base"))
        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }
}

project(":powermock-classloading:powermock-classloading-xstream") {
    description = "Performs classloader deep-cloning using X-Stream."

    dependencies {
        compile(project(":powermock-classloading:powermock-classloading-base"))
        compile("com.thoughtworks.xstream:xstream:${xstreamVersion}")
        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }
}

project(":powermock-modules") {
    jar {
        enabled = false
    }
}

project(":powermock-modules:powermock-module-javaagent") {
    description = "PowerMock Java agent support."

    dependencies {
        compile(project(":powermock-core"))
        testCompile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }

    jar {
        manifest {
            attributes(
                    "Manifest-Version": "1.0",
                    "Premain-Class": "org.powermock.modules.agent.PowerMockAgent",
                    "Agent-Class": "org.powermock.modules.agent.PowerMockAgent",
                    "Can-Retransform-Classes": true,
                    "Can-Redefine-Classes": true
            )
        }
    }
}

project(":powermock-modules:powermock-module-junit4-common") {
    description = "PowerMock support module for all versions of JUnit 4.x."

    dependencies {
        compile(project(":powermock-reflect"))
        compile(project(":powermock-core"))
        compile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        compile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }
}

project(":powermock-modules:powermock-module-junit4") {
    description = "PowerMock support module for JUnit 4.x."

    dependencies {
        compile(project(":powermock-modules:powermock-module-junit4-common"))
        compile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        compile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
        testCompile("org.easymock:easymock:${easymockVersion}")
    }
}

project(":powermock-modules:powermock-module-junit4-legacy") {
    description = "PowerMock support module for JUnit 4.0-4.3."

    dependencies {
        compile(project(":powermock-modules:powermock-module-junit4-common")) {
            exclude group: 'junit', module: 'junit'
        }
        compile("junit:junit:4.3") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        compile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }
}


project(":powermock-modules:powermock-module-junit4-rule") {
    description = "PowerMock support module for JUnit 4.x rules."

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-module-junit4-common"))

        provided(project(":powermock-classloading:powermock-classloading-base"))

        compile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        compile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }
}


project(":powermock-modules:powermock-module-junit4-rule-agent") {
    description = "PowerMock support module for JUnit 4.x rules with Java agent"

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-module-javaagent"))

        compile("junit:junit:${junitVersion}") {
            exclude group: 'org.hamcrest', module: 'hamcrest-core'
        }
        compile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }
}

project(":powermock-modules:powermock-module-junit-jupiter-agent") {
    description = "PowerMock support module for JUnit Jupiter extension with Java agent"

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-module-javaagent"))
        compile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    }
}

project(":powermock-modules:powermock-module-testng-common") {
    description = "PowerMock module for TestNG. Common classes"

    dependencies {
        compile(project(":powermock-reflect"))
        compile(project(":powermock-core"))
        compile("org.testng:testng:${testngVersion}")
        testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }
}

project(":powermock-modules:powermock-module-testng") {
    description = "PowerMock module for TestNG."

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-module-testng-common"))
        compile("org.testng:testng:${testngVersion}")
        testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }
}

project(":powermock-modules:powermock-module-testng-agent") {
    description = "PowerMock module for TestNG with using Javaagent."

    dependencies {
        compile(project(":powermock-core"))
        compile(project(":powermock-modules:powermock-module-testng-common"))
        compile(project(":powermock-modules:powermock-module-javaagent"))
        compile("org.testng:testng:${testngVersion}")
        testCompile("org.hamcrest:hamcrest-core:${hamcrestVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
    }
}

configure(publishableModules) { project ->
    apply from: "${gradleScriptDir}/release/publish-jar.gradle"

}
